{"name":"sc-mongodb","version":"1.2.0","description":"Installs and configures mongodb","long_description":"# sc-MongoDB Cookbook\n\n[![Build Status](https://travis-ci.org/sous-chefs/mongodb.svg)](https://travis-ci.org/sous-chefs/mongodb)\n\nInstalls and configures MongoDB\n\n## Supports:\n\n* Single MongoDB instance\n* Replication\n* Sharding\n* Replication and Sharding\n* MongoDB Monitoring System\n\n## Community\n\nLive discussion happens on [![Chef Community Slack](https://community-slack.chef.io/badge.svg)](https://community-slack.chef.io/) in [#sous-chefs](https://chefcommunity.slack.com/messages/sous-chefs/).\n\n## REQUIREMENTS:\n\nThis cookbook depends on these external cookbooks\n\n- apt\n- python\n- yum\n\nAs of 1.0 This Cookbook requires\n\n- Chef > 12.5\n- Ruby > 2.3\n\nAs of 0.16 This Cookbook requires\n\n- Chef > 11\n- Ruby > 1.9\n\n### Platform:\n\nCurrently we 'actively' test using test-kitchen on Ubuntu, Debian, CentOS, Redhat\n\n## DEFINITIONS:\n\nThis cookbook contains a definition `mongodb_instance` which can be used to configure\na certain type of mongodb instance, like the default mongodb or various components\nof a sharded setup.\n\nFor examples see the USAGE section below.\n\n## ATTRIBUTES:\n\n###Â MongoDB setup\n\n* `default['mongodb']['install_method']` - This option can be \"mongodb-org\" or \"none\" - Default (\"mongodb-org\")\n\n### MongoDB Configuration\n\nThe `node['mongodb']['config']` is split into 2 keys, `mongod` and `mongos` (i.e. node['mongodb']['config']['mongod']). They attributes are rendered out as a yaml config file. All settings defined in the Configuration File Options documentation page can be added to the `node['mongodb']['config'][<setting>]` attribute: https://docs.mongodb.com/manual/reference/configuration-options/\n\nSeveral important attributes to note:\n\n* `node['mongodb']['config']['mongod']['net']['bindIp']` - Configure from which address to accept connections\n* `node['mongodb']['config']['mongod']['net']['port']` - Port the mongod listens on, default is 27017\n* `node['mongodb']['config']['mongod']['replication']['oplogSizeMB']` - Specifies a maximum size in megabytes for the replication operation log\n* `node['mongodb']['config']['mongod']['storage']['dbPath']` - Location for mongodb data directory, defaults to \"/var/lib/mongodb\"\n* `node['mongodb']['config']['mongod']['storage']['engine']` - Storage engine to use, default is `\"wiredTiger\"`\n* `node['mongodb']['config']['mongod']['systemLog']['path']` - Path for the logfiles, default is `\"/var/lib/mongo\"` for `rhel` and `fedora` and `\"/var/log/mongodb/mongod.log\"` for all others\n* `node['mongodb']['config']['mongod'][<setting>]` - General MongoDB Configuration File option\n\n### Cookbook specific attributes\n\n* `node['mongodb']['reload_action']` - Action to take when MongoDB conf files are modified, default is `\"restart\"`\n* `node['mongodb']['package_version']` - Version of the MongoDB package to install, default is nil\n* `node['mongodb']['client_roles']` - Role identifying all external clients which should have access to a mongod instance\n\n### Sharding and replication attributes\n\n* `node['mongodb']['config']['mongod']['replication']['replSetName']` - Define name of replicaset\n* `node['mongodb']['cluster_name']` - Name of the cluster, all members of the cluster must reference to the same name, as this name is used internally to identify all members of a cluster.\n* `node['mongodb']['shard_name']` - Name of a shard, default is \"default\"\n* `node['mongodb']['sharded_collections']` - Define which collections are sharded\n* `node['mongodb']['replica_arbiter_only']` - Set to true to make node an [arbiter](http://docs.mongodb.org/manual/reference/replica-configuration/#local.system.replset.members[n].arbiterOnly).\n* `node['mongodb']['replica_build_indexes']` - Set to false to omit [index creation](http://docs.mongodb.org/manual/reference/replica-configuration/#local.system.replset.members[n].buildIndexes).\n* `node['mongodb']['replica_hidden']` - Set to true to [hide](http://docs.mongodb.org/manual/reference/replica-configuration/#local.system.replset.members[n].hidden) node from replicaset.\n* `node['mongodb']['replica_slave_delay']` - Number of seconds to [delay slave replication](http://docs.mongodb.org/manual/reference/replica-configuration/#local.system.replset.members[n].slaveDelay).\n* `node['mongodb']['replica_priority']` - Node [priority](http://docs.mongodb.org/manual/reference/replica-configuration/#local.system.replset.members[n].priority).\n* `node['mongodb']['replica_tags']` - Node [tags](http://docs.mongodb.org/manual/reference/replica-configuration/#local.system.replset.members[n].tags).\n* `node['mongodb']['replica_votes']` - Number of [votes](http://docs.mongodb.org/manual/reference/replica-configuration/#local.system.replset.members[n].votes) node will cast in an election.\n\n\n### shared MMS Agent attributes\n\n* `node['mongodb']['mms_agent']['api_key']` - MMS Agent API Key. No default, required.\n* `node['mongodb']['mms_agent']['automation']['config'][<setting>]` - General MongoDB MMS Automation Agent configuration file option.\n* `node['mongodb']['mms_agent']['backup']['config'][<setting>]` - General MongoDB MMS Monitoring Agent configuration file option.\n* `node['mongodb']['mms_agent']['monitoring']['config'][<setting>]` - General MongoDB MMS Monitoring Agent configuration file option.\n\n#### Automation Agent Settings\n\nThe defaults values installed by the package are:\n\n```\nmmsBaseUrl=https://mms.mongodb.com\nlogFile=/var/log/mongodb-mms-automation/automation-agent.log\nmmsConfigBackup=/var/lib/mongodb-mms-automation/mms-cluster-config-backup.json\nlogLevel=INFO\nmaxLogFiles=10\nmaxLogFileSize=268435456\n```\n\n#### Backup Agent Settings\n\nThe defaults values installed by the package are:\n\n```\nmothership=api-backup.mongodb.com\nhttps=true\n```\n\n#### Monitoring Agent Settings\n\nThe defaults values installed by the package are:\n\n```\nmmsBaseUrl=https://mms.mongodb.com\n```\n\n### User management attributes\n\n* `node['mongodb']['config']['auth']` - Require authentication to access or modify the database (`True` or `False`), Default is `nil`\n* `node['mongodb']['admin']` - The admin user with userAdmin privileges that allows user management\n* `node['mongodb']['users']` - Array of users to add when running the user management recipe\n\n## USAGE:\n\n### Single mongodb instance\n\nSimply add\n\n```ruby\ninclude_recipe \"sc-mongodb::default\"\n```\n\nto your recipe. This will run the mongodb instance as configured by your distribution.\nYou can change the dbpath, logpath and port settings (see ATTRIBUTES) for this node by\nusing the `mongodb_instance` definition:\n\n```ruby\nmongodb_instance \"mongodb\" do\n  port node['application']['port']\nend\n```\n\nThis definition also allows you to run another mongod instance with a different\nname on the same node\n\n```ruby\nmongodb_instance \"my_instance\" do\n  port node['mongodb']['port'] + 100\nend\n```\n\nThe result is a new system service with\n\n```shell\n  /etc/init.d/my_instance <start|stop|restart|status>\n```\n\n### Replicasets\n\nAdd `sc-mongodb::replicaset` (instead of `sc-mongodb::default`) to the node's run_list. Also choose a name for your\nreplicaset cluster and set the value of `node['mongodb']['cluster_name']` for each\nmember to this name.\n\nThe recipe will try to configure the replicaset with the instances already registered in your chef-server with the same \n`node['mongodb']['cluster_name']`, to configure various machines with the replicaset you'll need to deactivate the \nautomatic configuration with `node['mongodb']['auto_configure']['replicaset'] = false` and enable that flag only on the last\ninstance of the replicaset.\n\n### Sharding\n\nYou need a few more components, but the idea is the same: identification of the\nmembers with their different internal roles (mongos, configserver, etc.) is done via\nthe `node['mongodb']['cluster_name']` and `node['mongodb']['shard_name']` attributes.\n\nLet's have a look at a simple sharding setup, consisting of two shard servers, one\nconfig server and one mongos.\n\nFirst we would like to configure the two shards. For doing so, just use\n`sc-mongodb::shard` in the node's run_list and define a unique `mongodb['shard_name']`\nfor each of these two nodes, say \"shard1\" and \"shard2\".\n\nThen configure a node to act as a config server - by using the `sc-mongodb::configserver`\nrecipe.\n\nAnd finally you need to configure the mongos. This can be done by using the\n`sc-mongodb::mongos` recipe. The mongos needs some special configuration, as these\nmongos are actually doing the configuration of the whole sharded cluster.\nMost importantly you need to define what collections should be sharded by setting the\nattribute `mongodb['sharded_collections']`:\n\n```ruby\n{\n  \"mongodb\": {\n    \"sharded_collections\": {\n      \"test.addressbook\": \"name\",\n      \"mydatabase.calendar\": \"date\"\n    }\n  }\n}\n```\n\nNow mongos will automatically enable sharding for the \"test\" and the \"mydatabase\"\ndatabase. Also the \"addressbook\" and the \"calendar\" collection will be sharded,\nwith sharding key \"name\" resp. \"date\".\nIn the context of a sharding cluster always keep in mind to use a single role\nwhich is added to all members of the cluster to identify all member nodes.\nAlso shard names are important to distinguish the different shards.\nThis is esp. important when you want to replicate shards.\n\n### Sharding + Replication\n\nThe setup is not much different to the one described above. All you have to do is add the\n`sc-mongodb::replicaset` recipe to all shard nodes, and make sure that all shard\nnodes which should be in the same replicaset have the same shard name.\n\nFor more details, you can find a [tutorial for Sharding + Replication](https://github.com/edelight/chef-mongodb/wiki/MongoDB%3A-Replication%2BSharding) in the wiki.\n\n### MMS Agent\n\nThis cookbook also includes support for\n[MongoDB Monitoring System (MMS)](https://mms.mongodb.com/)\nagent. MMS is a hosted monitoring service, provided by MongoDB, Inc. Once\nthe small agent program is installed on the MongoDB host, it\nautomatically collects the metrics and uploads them to the MMS server.\nThe graphs of these metrics are shown on the web page. It helps a lot\nfor tackling MongoDB related problems, so MMS is the baseline for all\nproduction MongoDB deployments.\n\n\nTo setup MMS, simply set your keys in\n`node['mongodb']['mms_agent']['api_key']` and then add the\n`sc-mongodb::mms_monitoring_agent` recipe to your run list. Your current keys\nshould be available at your [MMS Settings page](https://mms.mongodb.com/settings).\n\nThe agent install and configurations is also available via a custom resource for\nwrapper cookbooks.  This allows for further customization outside of this\ncookbook\n\n```ruby\nmongodb_agent 'monitoring' do\n  config {} # Key and value pairs that will be in the config file\n  group 'group' # Group to own the config file\n  package_url 'package_url' # Download URL of the agent package\n  user 'user' # User to own the config file\nend\n```\n\n### User Management\n\n**NOTE:** Using the `sc-mongodb::user_management` is not secure since passwords are stored plain\ntext in your node attributes.  Please concider using a wrapper recipe with encrypted data bags\nwhen using this cookbook in production.\n\nAn optional recipe is `sc-mongodb::user_management` which will enable authentication in\nthe configuration file by default and create any users in the `node['mongodb']['users']`.\nThe users array expects a hash of username, password, roles, and database. Roles should be\nan array of roles the user should have on the database given.\n\nBy default, authentication is not required on the database. This can be overridden by setting\nthe `node['mongodb']['config']['auth']` attribute to true in the chef json.\n\nIf the auth configuration is true, it will try to create the `node['mongodb']['admin']` user, or\nupdate them if they already exist. Before using on a new database, ensure you're overwriting\nthe `node['mongodb']['authentication']['username']` and `node['mongodb']['authentication']['password']` to\nsomething besides their default values.\n\nTo update the admin username or password after already having deployed the recipe with authentication\nas required, simply change `node['mongodb']['admin']['password']` to the new password while keeping the\nvalue of `node['mongodb']['authentication']['password']` the old value. After the recipe runs successfully,\nbe sure to change the latter variable to the new password so that subsequent attempts to authenticate will\nwork.\n\nThere's also a user resource which has the actions `:add`, `:modify` and `:delete`. If modify is\nused on a user that doesn't exist, it will be added. If add is used on a user that exists, it\nwill be modified.\n\nIf using this recipe with replication and sharding, ensure that the `node['mongodb']['key_file_content']`\nis set. All nodes must have the same key file in order for the replica set to initialize successfully\nwhen authentication is required. For mongos instances, set `node['mongodb']['mongos_create_admin']` to\n`true` to force the creation of the admin user on mongos instances.\n\n# LICENSE and AUTHOR:\n\n## Original Author\n- Author:: Markus Korn <markus.korn@edelight.de> via https://github.com/edelight/chef-mongodb\n\n## Current Maintainers\n\n- Maintainer:: Pierce Moore <me@prex.io>\n- Maintainer Community:: Sous Chefs [help@sous-chefs.org](mailto:help@sous-chefs.org)\n\nCopyright:: 2011-2014, edelight GmbH\n\n```\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n","maintainer":"Sous Chefs","maintainer_email":"help@sous-chefs.org","license":"Apache-2.0","platforms":{"amazon":">= 0.0.0","centos":">= 0.0.0","debian":">= 0.0.0","oracle":">= 0.0.0","redhat":">= 0.0.0","ubuntu":">= 0.0.0"},"dependencies":{"apt":">= 1.8.2","yum":">= 3.0","build-essential":">= 5.0.0"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"source_url":"https://github.com/sous-chefs/mongodb","issues_url":"https://github.com/sous-chefs/mongodb/issues","chef_version":[[">= 12.5"]],"ohai_version":[]}